/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;
import javax.annotation.Nullable;
import javax.annotation.Nonnull;

//@javax.annotation.ParametersAreNullableByDefault
@javax.annotation.ParametersAreNonnullByDefault
public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    /*
     * 1- NullAway will warn about yearsToRetirement method
     * 2- Uncomment @Nullable in printAge and NullAway will warn about this method
     * 3- Add a standard null check to be NullAway compliant
     * 4- Build will be SUCCESS
     */

    static @Nullable Integer getAgeNullable(@Nullable Person person) {
        if(person == null) {
            return null;
        }
        return person.getAge();
    }

    static Integer getAgeNonNullable(Person person) {
        return person.getAge();
    }

    void foo() {
        Person p = null;
        // ... p never gets set correctly...
        var ageNullable = getAgeNullable(p);


        @Nullable Integer xNullable = null;


        // works fine
        if(ageNullable!=null) {
            xNullable= 65 - ageNullable;
        }

        // compile error: non-nullable "ageNullable" required
        if(ageNullable==null) {
            xNullable= 65 - ageNullable;
        }


       var y= 65 - getAgeNonNullable(p); // compile error: non-nullable "p" required

        // works fine
        Integer xNonNullable = 123;
        if(ageNullable!=null) {
            xNonNullable= 65 - ageNullable;
        }

        // compile error: unboxing of nullable value
        if(ageNullable==null) {
            xNonNullable= 65 - ageNullable;
        }

    }


    public static void main(String[] args) {
        System.out.println(new App().getGreeting());
    }
}
